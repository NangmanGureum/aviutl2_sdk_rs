# [allow (non_snake_case)] # [allow (dead_code)] # [allow (non_upper_case_globals)] # [allow (non_camel_case_types)] # [doc = "Generated using autocxx - do not edit directly"] # [doc = "@generated"] mod ffi { # [doc = r" A trait to be implemented by any type that can be turned"] # [doc = r" into a C++ string."] # [doc = r" This trait is generated once per autocxx FFI mod and each"] # [doc = r" implementation is incompatible and separate, because each"] # [doc = r" will use a function generated independently for each mod"] # [doc = r" in order to do the actual conversion to a C++ string."] pub trait ToCppString { # [doc = r" Convert `self` into a C++ string in a [`cxx::UniquePtr`]."] fn into_cpp (self) -> cxx :: UniquePtr < cxx :: CxxString > ; } impl ToCppString for & str { fn into_cpp (self) -> cxx :: UniquePtr < cxx :: CxxString > { make_string (self) } } impl ToCppString for String { fn into_cpp (self) -> cxx :: UniquePtr < cxx :: CxxString > { make_string (& self) } } impl ToCppString for & String { fn into_cpp (self) -> cxx :: UniquePtr < cxx :: CxxString > { make_string (self) } } impl ToCppString for cxx :: UniquePtr < cxx :: CxxString > { fn into_cpp (self) -> cxx :: UniquePtr < cxx :: CxxString > { self } } # [doc = "A private mod containing the bindings generated by `bindgen`. Do not use the contents directly - the useful parts will be re-exported into the main FFI mod."] mod bindgen { # [repr (transparent)] pub struct __bindgen_marker_Opaque < T : ? Sized > (T) ; # [repr (transparent)] pub struct __bindgen_marker_Reference < T : ? Sized > (T) ; # [repr (transparent)] pub struct __bindgen_marker_RValueReference < T : ? Sized > (T) ; # [allow (non_snake_case , non_camel_case_types , non_upper_case_globals)] pub mod root { # [allow (unused_imports)] use self :: super :: root ; # [allow (unused_imports)] use super :: { __bindgen_marker_Opaque , __bindgen_marker_Reference , __bindgen_marker_RValueReference } ; # [allow (unused_imports)] use autocxx :: c_char16_t as bindgen_cchar16_t ; # [doc = " <div rustbindgen=\"true\" replaces=\"std::unique_ptr\"></div>"] # [repr (C)] pub struct unique_ptr < T , > { pub _phantom_0 : :: std :: marker :: PhantomData < :: std :: cell :: UnsafeCell < T > > , ptr : * mut T , } # [doc = " <div rustbindgen=\"true\" replaces=\"std::vector\"></div>"] # [repr (C)] pub struct vector < T , > { pub _phantom_0 : :: std :: marker :: PhantomData < :: std :: cell :: UnsafeCell < T > > , ptr : * mut T , } # [doc = " <div rustbindgen=\"true\" replaces=\"std::shared_ptr\"></div>"] # [repr (C)] pub struct shared_ptr < T , > { pub _phantom_0 : :: std :: marker :: PhantomData < :: std :: cell :: UnsafeCell < T > > , ptr : * mut T , } # [doc = " <div rustbindgen=\"true\" replaces=\"std::weak_ptr\"></div>"] # [repr (C)] pub struct weak_ptr < T , > { pub _phantom_0 : :: std :: marker :: PhantomData < :: std :: cell :: UnsafeCell < T > > , ptr : * mut T , } # [doc = " <div rustbindgen=\"true\" replaces=\"std::string\"></div>"] # [repr (C)] pub struct string { ptr : * mut :: std :: os :: raw :: c_char , } # [doc = " <div rustbindgen=\"true\" replaces=\"rust::Str\"></div>"] # [repr (C)] pub struct Str { ptr : * mut :: std :: os :: raw :: c_char , } # [doc = " <div rustbindgen=\"true\" replaces=\"rust::String\"></div>"] # [repr (C)] pub struct String { ptr : * mut :: std :: os :: raw :: c_char , } # [doc = " <div rustbindgen=\"true\" replaces=\"rust::Box\"></div>"] # [repr (C)] pub struct Box < T , > { pub _phantom_0 : :: std :: marker :: PhantomData < :: std :: cell :: UnsafeCell < T > > , ptr : * mut T , } pub type DWORD = :: std :: os :: raw :: c_ulong ; pub type WORD = :: std :: os :: raw :: c_ushort ; pub type LONG = :: std :: os :: raw :: c_long ; pub type WCHAR = u16 ; pub type LPCWSTR = * const root :: WCHAR ; # [repr (C)] pub struct HINSTANCE__ { pub unused : :: std :: os :: raw :: c_int , } pub type HINSTANCE = * mut root :: HINSTANCE__ ; # [repr (C)] pub struct HWND__ { pub unused : :: std :: os :: raw :: c_int , } pub type HWND = * mut root :: HWND__ ; # [repr (C)] pub struct tagBITMAPINFOHEADER { pub biSize : root :: DWORD , pub biWidth : root :: LONG , pub biHeight : root :: LONG , pub biPlanes : root :: WORD , pub biBitCount : root :: WORD , pub biCompression : root :: DWORD , pub biSizeImage : root :: DWORD , pub biXPelsPerMeter : root :: LONG , pub biYPelsPerMeter : root :: LONG , pub biClrUsed : root :: DWORD , pub biClrImportant : root :: DWORD , } pub type BITMAPINFOHEADER = root :: tagBITMAPINFOHEADER ; # [repr (C , packed)] pub struct tWAVEFORMATEX { pub wFormatTag : root :: WORD , pub nChannels : root :: WORD , pub nSamplesPerSec : root :: DWORD , pub nAvgBytesPerSec : root :: DWORD , pub nBlockAlign : root :: WORD , pub wBitsPerSample : root :: WORD , pub cbSize : root :: WORD , } pub type WAVEFORMATEX = root :: tWAVEFORMATEX ; # [repr (C)] pub struct INPUT_INFO { pub flag : :: std :: os :: raw :: c_int , pub rate : :: std :: os :: raw :: c_int , pub scale : :: std :: os :: raw :: c_int , pub n : :: std :: os :: raw :: c_int , pub format : * mut root :: BITMAPINFOHEADER , pub format_size : :: std :: os :: raw :: c_int , pub audio_n : :: std :: os :: raw :: c_int , pub audio_format : * mut root :: WAVEFORMATEX , pub audio_format_size : :: std :: os :: raw :: c_int , } pub const INPUT_INFO_FLAG_VIDEO : :: std :: os :: raw :: c_int = 1 ; pub const INPUT_INFO_FLAG_AUDIO : :: std :: os :: raw :: c_int = 2 ; pub const INPUT_INFO_FLAG_CONCURRENT : :: std :: os :: raw :: c_int = 16 ; pub type INPUT_HANDLE = * mut :: std :: os :: raw :: c_void ; # [repr (C)] pub struct INPUT_PLUGIN_TABLE { pub flag : :: std :: os :: raw :: c_int , pub name : root :: LPCWSTR , pub filefilter : root :: LPCWSTR , pub information : root :: LPCWSTR , pub func_open : :: std :: option :: Option < unsafe extern "C" fn (file : root :: LPCWSTR) -> root :: INPUT_HANDLE > , pub func_close : :: std :: option :: Option < unsafe extern "C" fn (ih : root :: INPUT_HANDLE) -> bool > , pub func_info_get : :: std :: option :: Option < unsafe extern "C" fn (ih : root :: INPUT_HANDLE , iip : * mut root :: INPUT_INFO) -> bool > , pub func_read_video : :: std :: option :: Option < unsafe extern "C" fn (ih : root :: INPUT_HANDLE , frame : :: std :: os :: raw :: c_int , buf : * mut :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int > , pub func_read_audio : :: std :: option :: Option < unsafe extern "C" fn (ih : root :: INPUT_HANDLE , start : :: std :: os :: raw :: c_int , length : :: std :: os :: raw :: c_int , buf : * mut :: std :: os :: raw :: c_void) -> :: std :: os :: raw :: c_int > , pub func_config : :: std :: option :: Option < unsafe extern "C" fn (hwnd : root :: HWND , dll_hinst : root :: HINSTANCE) -> bool > , } pub const INPUT_PLUGIN_TABLE_FLAG_VIDEO : :: std :: os :: raw :: c_int = 1 ; pub const INPUT_PLUGIN_TABLE_FLAG_AUDIO : :: std :: os :: raw :: c_int = 2 ; } } # [doc = r" A private mod containing the bindings generated by [`cxx`]. Do not use the contents directly - the useful parts will be re-exported into the main FFI mod."] # [cxx :: bridge] mod cxxbridge { impl UniquePtr < INPUT_INFO > { } impl SharedPtr < INPUT_INFO > { } impl WeakPtr < INPUT_INFO > { } impl CxxVector < INPUT_INFO > { } impl UniquePtr < INPUT_PLUGIN_TABLE > { } impl SharedPtr < INPUT_PLUGIN_TABLE > { } impl WeakPtr < INPUT_PLUGIN_TABLE > { } impl CxxVector < INPUT_PLUGIN_TABLE > { } unsafe extern "C++" { # [doc = r" Make a C++ [`cxx::UniquePtr`] to a [`cxx::CxxString`]"] # [doc = r" from a Rust `&str`."] fn autocxx_make_string_0xbb8831896a18b3ba (str_ : & str) -> UniquePtr < CxxString > ; pub unsafe fn INPUT_INFO_autocxx_alloc_autocxx_wrapper_0xbb8831896a18b3ba () -> * mut INPUT_INFO ; pub unsafe fn INPUT_INFO_autocxx_free_autocxx_wrapper_0xbb8831896a18b3ba (arg0 : * mut INPUT_INFO) ; # [cxx_name = "INPUT_INFO"] type INPUT_INFO = super :: INPUT_INFO ; pub unsafe fn INPUT_PLUGIN_TABLE_autocxx_alloc_autocxx_wrapper_0xbb8831896a18b3ba () -> * mut INPUT_PLUGIN_TABLE ; pub unsafe fn INPUT_PLUGIN_TABLE_autocxx_free_autocxx_wrapper_0xbb8831896a18b3ba (arg0 : * mut INPUT_PLUGIN_TABLE) ; # [cxx_name = "INPUT_PLUGIN_TABLE"] type INPUT_PLUGIN_TABLE = super :: INPUT_PLUGIN_TABLE ; # [doc = "Synthesized default constructor."] pub unsafe fn INPUT_INFO_new_autocxx_autocxx_wrapper_0xbb8831896a18b3ba (autocxx_gen_this : * mut INPUT_INFO) ; # [doc = "Synthesized move constructor."] pub unsafe fn INPUT_INFO_new_synthetic_move_ctor_0xbb8831896a18b3ba_autocxx_wrapper_0xbb8831896a18b3ba (autocxx_gen_this : * mut INPUT_INFO , other : * mut INPUT_INFO) ; # [doc = "Synthesized copy constructor."] pub unsafe fn INPUT_INFO_new_synthetic_const_copy_ctor_0xbb8831896a18b3ba_autocxx_wrapper_0xbb8831896a18b3ba (autocxx_gen_this : * mut INPUT_INFO , other : & INPUT_INFO) ; # [doc = "Synthesized destructor."] pub unsafe fn INPUT_INFO_synthetic_destructor_0xbb8831896a18b3ba_autocxx_wrapper_0xbb8831896a18b3ba (autocxx_gen_this : * mut INPUT_INFO) ; # [doc = "Synthesized move constructor."] pub unsafe fn INPUT_PLUGIN_TABLE_new_synthetic_move_ctor_0xbb8831896a18b3ba_autocxx_wrapper_0xbb8831896a18b3ba (autocxx_gen_this : * mut INPUT_PLUGIN_TABLE , other : * mut INPUT_PLUGIN_TABLE) ; # [doc = "Synthesized copy constructor."] pub unsafe fn INPUT_PLUGIN_TABLE_new_synthetic_const_copy_ctor_0xbb8831896a18b3ba_autocxx_wrapper_0xbb8831896a18b3ba (autocxx_gen_this : * mut INPUT_PLUGIN_TABLE , other : & INPUT_PLUGIN_TABLE) ; # [doc = "Synthesized destructor."] pub unsafe fn INPUT_PLUGIN_TABLE_synthetic_destructor_0xbb8831896a18b3ba_autocxx_wrapper_0xbb8831896a18b3ba (autocxx_gen_this : * mut INPUT_PLUGIN_TABLE) ; type c_void = autocxx :: c_void ; include ! ("windows.h") ; include ! ("input2.h") ; include ! ("autocxxgen_ffi.h") ; } extern "Rust" { } } # [allow (unused_imports)] use bindgen :: root ; # [allow (unused_imports)] use super :: ffi as output ; pub use cxxbridge :: autocxx_make_string_0xbb8831896a18b3ba as make_string ; # [repr (transparent)] pub struct INPUT_INFO { _hidden_contents : :: core :: cell :: UnsafeCell < :: core :: mem :: MaybeUninit < bindgen :: root :: INPUT_INFO > > , } unsafe impl cxx :: ExternType for INPUT_INFO { type Id = cxx :: type_id ! ("INPUT_INFO") ; type Kind = cxx :: kind :: Opaque ; } # [allow (unused_imports)] pub use bindgen :: root :: INPUT_HANDLE ; # [repr (transparent)] pub struct INPUT_PLUGIN_TABLE { _hidden_contents : :: core :: cell :: UnsafeCell < :: core :: mem :: MaybeUninit < bindgen :: root :: INPUT_PLUGIN_TABLE > > , } unsafe impl cxx :: ExternType for INPUT_PLUGIN_TABLE { type Id = cxx :: type_id ! ("INPUT_PLUGIN_TABLE") ; type Kind = cxx :: kind :: Opaque ; } impl INPUT_INFO { # [doc = "Synthesized default constructor."] pub fn new () -> impl autocxx :: moveit :: new :: New < Output = Self > { unsafe { autocxx :: moveit :: new :: by_raw (move | this | { let this = this . get_unchecked_mut () . as_mut_ptr () ; cxxbridge :: INPUT_INFO_new_autocxx_autocxx_wrapper_0xbb8831896a18b3ba (this) }) } } } unsafe impl autocxx :: moveit :: MakeCppStorage for output :: INPUT_INFO { unsafe fn allocate_uninitialized_cpp_storage () -> * mut output :: INPUT_INFO { cxxbridge :: INPUT_INFO_autocxx_alloc_autocxx_wrapper_0xbb8831896a18b3ba () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut output :: INPUT_INFO) { cxxbridge :: INPUT_INFO_autocxx_free_autocxx_wrapper_0xbb8831896a18b3ba (arg0) } } unsafe impl autocxx :: moveit :: MakeCppStorage for output :: INPUT_PLUGIN_TABLE { unsafe fn allocate_uninitialized_cpp_storage () -> * mut output :: INPUT_PLUGIN_TABLE { cxxbridge :: INPUT_PLUGIN_TABLE_autocxx_alloc_autocxx_wrapper_0xbb8831896a18b3ba () } unsafe fn free_uninitialized_cpp_storage (arg0 : * mut output :: INPUT_PLUGIN_TABLE) { cxxbridge :: INPUT_PLUGIN_TABLE_autocxx_free_autocxx_wrapper_0xbb8831896a18b3ba (arg0) } } unsafe impl autocxx :: moveit :: new :: MoveNew for output :: INPUT_INFO { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , output :: INPUT_INFO > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < output :: INPUT_INFO > >) { cxxbridge :: INPUT_INFO_new_synthetic_move_ctor_0xbb8831896a18b3ba_autocxx_wrapper_0xbb8831896a18b3ba (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for output :: INPUT_INFO { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & output :: INPUT_INFO , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < output :: INPUT_INFO > >) { cxxbridge :: INPUT_INFO_new_synthetic_const_copy_ctor_0xbb8831896a18b3ba_autocxx_wrapper_0xbb8831896a18b3ba (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for output :: INPUT_INFO { # [doc = "Synthesized destructor."] fn drop (self : & mut output :: INPUT_INFO) { unsafe { cxxbridge :: INPUT_INFO_synthetic_destructor_0xbb8831896a18b3ba_autocxx_wrapper_0xbb8831896a18b3ba (self) } } } unsafe impl autocxx :: moveit :: new :: MoveNew for output :: INPUT_PLUGIN_TABLE { # [doc = "Synthesized move constructor."] unsafe fn move_new (mut other : :: core :: pin :: Pin < autocxx :: moveit :: MoveRef < '_ , output :: INPUT_PLUGIN_TABLE > > , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < output :: INPUT_PLUGIN_TABLE > >) { cxxbridge :: INPUT_PLUGIN_TABLE_new_synthetic_move_ctor_0xbb8831896a18b3ba_autocxx_wrapper_0xbb8831896a18b3ba (this . get_unchecked_mut () . as_mut_ptr () , { let r : & mut _ = :: core :: pin :: Pin :: into_inner_unchecked (other . as_mut ()) ; r }) } } unsafe impl autocxx :: moveit :: new :: CopyNew for output :: INPUT_PLUGIN_TABLE { # [doc = "Synthesized copy constructor."] unsafe fn copy_new (other : & output :: INPUT_PLUGIN_TABLE , this : :: core :: pin :: Pin < & mut :: core :: mem :: MaybeUninit < output :: INPUT_PLUGIN_TABLE > >) { cxxbridge :: INPUT_PLUGIN_TABLE_new_synthetic_const_copy_ctor_0xbb8831896a18b3ba_autocxx_wrapper_0xbb8831896a18b3ba (this . get_unchecked_mut () . as_mut_ptr () , other) } } impl Drop for output :: INPUT_PLUGIN_TABLE { # [doc = "Synthesized destructor."] fn drop (self : & mut output :: INPUT_PLUGIN_TABLE) { unsafe { cxxbridge :: INPUT_PLUGIN_TABLE_synthetic_destructor_0xbb8831896a18b3ba_autocxx_wrapper_0xbb8831896a18b3ba (self) } } } }